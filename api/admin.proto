syntax = "proto3";

import "google/api/annotations.proto";

option go_package = "github.com/jamespfennell/transiter/api";

/**
Admin API
*/
service Admin {
  // Get the config for a system
  //
  // `GET /systems/<system_id>/config`
  rpc GetSystemConfig(GetSystemConfigRequest) returns (SystemConfig) {
    option (google.api.http) = {
      get: "/systems/{system_id}/config"
    };
  }

  // Install or update a system
  //
  // `PUT /systems/<system_id>`
  //
  // Installs or updates the system based on the configuration provided in the
  // request payload.
  // If the system does not exist an install is performed; otherwise the system is updated.
  //
  // This is an asynchronous operation.
  // The system configuration is validated before the request finishes
  // but database and feed updates are performed asynchronously. The status of the operation can
  // be determined by polling the GetSystem method and inspecting the status field.
  rpc InstallOrUpdateSystem(InstallOrUpdateSystemRequest) returns (InstallOrUpdateSystemReply) {
    option (google.api.http) = {
      put: "/systems/{system_id}"
      body: "*"
    };
  }

  // Delete a system
  //
  // `DELETE /systems/<system_id>`
  //
  // Deletes the specified system.
  rpc DeleteSystem(DeleteSystemRequest) returns (DeleteSystemReply) {
    option (google.api.http) = {
      delete: "/systems/{system_id}"
    };
  }

  // Update a feed
  //
  // `POST /systems/<system_id>/feeds/<feed_id>`
  //
  // Triggers a feed update for the specified feed.
  rpc UpdateFeed(UpdateFeedRequest) returns (UpdateFeedReply) {
    option (google.api.http) = {
      post: "/systems/{system_id}/feeds/{feed_id}"
    };
  }

  // Get scheduler status
  //
  // `GET /scheduler`
  //
  // Gets the status of the scheduler.
  rpc GetSchedulerStatus(GetSchedulerStatusRequest) returns (GetSchedulerStatusReply) {
    option (google.api.http) = {
      get: "/scheduler"
    };
  }

  // Reset scheduler
  //
  // `POST /scheduler`
  //
  // Performs a full restart of the scheduler, with all scheduler
  //   configurations retrieved fresh from the database.
  // In general this endpoint should never be needed;
  //   Transiter automatically restarts the scheduler when needed.
  //  The main usecase is when the Postgres configuration is manually
  //   updated and the scheduler needs to see the update.
  rpc ResetScheduler(ResetSchedulerRequest) returns (ResetSchedulerReply) {
    option (google.api.http) = {
      post: "/scheduler"
    };
  }

  // Get the current log level.
  //
  // `GET /loglevel`
  rpc GetLogLevel(GetLogLevelRequest) returns (GetLogLevelReply) {
    option (google.api.http) = {
      get: "/loglevel"
    };
  }

  // Set the log level.
  //
  // `PUT /loglevel`
  rpc SetLogLevel(SetLogLevelRequest) returns (SetLogLevelReply) {
    option (google.api.http) = {
      put: "/loglevel"
    };
  }

  // TODO: GetFeedConfig
}

message GetSystemConfigRequest {
  string system_id = 1;
}

message InstallOrUpdateSystemRequest {
  reserved 5;

  // ID of the system to install or update.
  string system_id = 1;

  oneof config {
    SystemConfig system_config = 2;
    TextConfig yaml_config = 3;
    // TODO: TextConfig json_config = 4;
  }

  // If true, do not perform an update if the system already exists.
  bool install_only = 4;
}

// TextConfig contains a Transiter system configuration in non-proto format
// (e.g. YAML or JSON).
message TextConfig {
  oneof source {
    // A URL where the config can be retrieved from using a simple GET request.
    // If the URL requires a more complex interaction (authentication, a different
    // HTTP verb), the config should be retrieved outside of Transiter and provided
    // in the content field.
    string url = 1;
    // The text content of the config.
    string content = 2;
  }
  // Whether the config is a template. If true the config will first be processed
  // using Go's template library.
  bool is_template = 3;

  // Arguments to pass to Go's template library if the config is a template.
  //
  // In general as much information as possible should be in the config itself.
  // The template args are intended for things like API keys which are secret
  // and/or different for each person that installs the system.
  map<string, string> template_args = 4;
}

message InstallOrUpdateSystemReply {
  string system_id = 1;
  SystemConfig system_config = 2;
}

message DeleteSystemRequest {
  string system_id = 1;
}

message DeleteSystemReply {}

// Configuration for a system.
message SystemConfig {
  // Name of the system.
  string name = 1;
  // Configuration for the system's feeds.
  repeated FeedConfig feeds = 2;
  // Configuration for the system's service maps.
  repeated ServiceMapConfig service_maps = 3;
}

message FeedConfig {
  // Identifier of this feed config.
  // This must be unique within the system.
  string id = 1;

  // The type of the feed.
  // Allowable values are `GTFS_STATIC`, `GTFS_REALTIME` and `NYCT_SUBWAY_CSV`.
  //
  // The are possible future plans to support plugging in additional custom types at build time.
  // This is why the field is a string and not an enum.
  string type = 13;

  // Deprecated: use `type` instead.
  string parser = 8 [deprecated = true];

  // Additional options GTFS realtime feeds.
  optional GtfsRealtimeOptions gtfs_realtime_options = 9;

  // Required for install specifies whether an update should be performed for this feed during system install.
  // If true, an update is performed and if the update fails the installation fails.
  //
  // If unspecified, defaults to false for GTFS realtime feeds and true for all other
  // types of feeds.
  optional bool required_for_install = 2;

  // Transiter runs a background task called the scheduler which performs feed updates automatically.
  // A scheduling policy determines when the scheduler will perform feed updates for this feed.
  enum SchedulingPolicy {
    // Use the default policy, which is PERIODIC for GTFS realtime feeds and DAILY for all other feeds.
    DEFAULT = 0;
    // Perform an update periodically, with the period specified in the `periodic_update_period_ms` field.
    PERIODIC = 1;
    // Perform an update once a day, with the time of day specified in the `daily_update_time` field.
    DAILY = 2;
    // Don't perform updates in the scheduler. Updates can always be triggered manually using the admin API.
    NONE = 3;
  }
  // The scheduling policy to use for this feed.
  //
  // If unspecified, it takes the value `DEFAULT``.
  SchedulingPolicy scheduling_policy = 14;

  // Deprecated: use `scheduling_policy` instead.
  SchedulingPolicy update_strategy = 3 [deprecated=true];

  // For feeds with a `PERIODIC` scheduling policy, the update period.
  //
  // If unspecified, defaults to 5 seconds.
  optional int64 periodic_update_period_ms = 10;

  // Deprecated: use `periodic_update_period_ms` instead.
  optional double update_period_s = 4 [deprecated = true];

  // For feeds with a `DAILY` scheduling policy,
  // the time of day in the form HH:MM at which to perform an update.
  //
  // If unspecified, defaults to 03:00 for the first feed in the system, 03:10 for the second feed,
  // and so on.
  // The idea of the default is to run at night when the system is either quiet or not running.
  // The staggering is to avoid updates stepping on each other, and to spread out the load.
  string daily_update_time = 11;

  // For feeds with a `DAILY` scheduling policy,
  // the timezone for the time of day specified in the `daily_update_time`.
  //
  // If empty, a default is provided as follows.
  // The scheduler lists the agencies for the system in order of ID and uses
  // the first valid timezone it finds.
  // Given the GTFS static specification this should always work.
  // Moreover, all agencies should have the same timezone so listing in order of ID shouldn't matter.
  // But in reality it may not work.
  // If there is no valid agency timezones, the scheduler will log a warning and fall back to UTC.
  string daily_update_timezone = 12;

  // URL at which the feed can be downloaded using a HTTP GET request.
  // Transiter does not currently support non-GET requests.
  string url = 5;
  // Timeout to enforce for the request to the feed URL. If not specified, defaults to 5 seconds.
  optional int64 request_timeout_ms = 6;
  // HTTP headers to send in the request.
  map<string, string> http_headers = 7;
}

// Message describing additional options for the GTFS realtime feeds.
message GtfsRealtimeOptions {
  enum Extension {
    NO_EXTENSION = 0;
    NYCT_TRIPS = 1;
    NYCT_ALERTS = 2;
  }
  Extension extension = 1;

  message NyctTripsOptions {
    bool filter_stale_unassigned_trips = 1;
    bool preserve_m_train_platforms_in_bushwick = 2;
  }
  optional NyctTripsOptions nyct_trips_options = 2;

  message NyctAlertsOptions {
    enum ElevatorAlertsDeduplicationPolicy {
      NO_DEDUPLICATION = 0;
      DEDUPLICATE_IN_STATION = 1;
      DEDUPLICATE_IN_COMPLEX = 2;
    }
    ElevatorAlertsDeduplicationPolicy elevator_alerts_deduplication_policy = 1;
    bool elevator_alerts_inform_using_station_ids = 2;
    bool skip_timetabled_no_service_alerts = 3;
    bool add_nyct_metadata = 4;
  }
  optional NyctAlertsOptions nyct_alerts_options = 3;

  // If true, stop sequences in the GTFS realtime feed data are ignored, and
  // alternative stop sequences are generated and assigned by Transiter.
  // This setting is designed for buggy GTFS realtime feeds in which
  // stop sequences (incorrectly) change between updates. In many cases
  // Transiter is able to generate stop sequences that are correct and
  // stable across updates.
  //
  // This should not be used for systems where a trip can call at the same
  // stop multiple times.
  bool reassign_stop_sequences = 4;
}

// Description of the configuration for a collection of service maps.
message ServiceMapConfig {
  // Identifier of this service maps config.
  // This must be unique within the system.
  string id = 1;

  // Source describes the possible sources for service maps.
  enum Source {
    // Build the service maps using the GTFS static data.
    STATIC = 0;
    // Build the service maps using the GTFS realtime data.
    REALTIME = 1;
  }
  // Source of the service maps built using this config.
  Source source = 2;

  // The threshold setting is used to exclude one-off trip schedules from service maps.
  // When calculating a service map, all trips are bucketed based on their schedule.
  // If the threshold is 0.2, trips are only included if the corresponding bucket contains
  // at least 20% of the trips. In particular, a one-off trip whose bucket only contains
  // itself will be excluded if there are many other trips.
  //
  // Note that a trip's schedule is reversed if needed based on the direction ID.
  double threshold = 3;

  // Description of options relevent for static service maps only.
  message StaticOptions {
    // If specified, only include trips that start earlier than this time.
    // The time is specified as a number of hours after midnight; i.e., 2:30am is '2.5'.
    optional double starts_earlier_than = 1;
    // If specified, only include trips that start later than this time.
    optional double starts_later_than = 2;
    // If specified, only include trips that end earlier than this time.
    optional double ends_earlier_than = 3;
    // If specified, only include trips that end later than this time.
    optional double ends_later_than = 4;
    // If specified, only include trips which run on at least one of the provided days.
    // If left empty, no trip filtering is provided.
    repeated string days = 5;
  }
  // Additional options relevent for static service maps only.
  optional StaticOptions static_options = 4;
}

message UpdateFeedRequest {
  string system_id = 1;
  string feed_id = 2;

  // If true, a full feed update will be performed even if the download data is identical
  // to the last update for this feed.
  bool force = 3;
}

// Description of a feed update operation.
message FeedUpdate {
  // ID of the feed update. This is a randomly generated UUID.
  // It can be used to find server logs for the update operation.
  string update_id = 1;

  // The feed configuration that was used to perform the feed update.
  FeedConfig feed_config = 27;

  // Unix timestamp of when the update started.
  int64 started_at_ms = 4;
  // Unix timestamp of when the update finished.
  // Only populated if the update is finished.
  optional int64 finished_at_ms = 6;

  optional int64 total_latency_ms = 20;
  optional int64 download_latency_ms = 21;
  optional int64 parse_latency_ms = 22;
  optional int64 database_latency_ms = 25;
  optional int32 download_http_status_code = 26;

  enum Status {
    // Unknown status.
    UNKNOWN = 0;
    // Feed update is in progress. Currently this status never appears in the admin API, but is
    // added in case Transiter support async feed updates in the future.
    RUNNING = 1;
    // Finished successfully.
    UPDATED = 2;
    // The update was skipped because the downloaded data was identical to the data for the last successful update.
    SKIPPED = 3;
    // Failed to download feed data.
    FAILED_DOWNLOAD_ERROR = 4;
    // Feed data was empty.
    FAILED_EMPTY_FEED = 5;
    // The feed configuration is invalid. This typically indicates a bug in Transiter because
    // the feed configuration is validated when the system is being installed.
    FAILED_INVALID_FEED_CONFIG = 6;
    // Failed to parse the feed data.
    // This means the feed data was corrupted or otherwise invalid.
    FAILED_PARSE_ERROR = 8;
    // Failed to update the database using the new feed data.
    // This typically indicates a bug in Transiter or a transient error connecting to the database.
    FAILED_UPDATE_ERROR = 9;
    // An internal unspecified error occured.
    FAILED_INTERNAL_ERROR = 10;
    // The feed has an unknown type.
    FAILED_UNKNOWN_FEED_TYPE = 11;
  }
  // Status of the update.
  Status status = 7;
  // Number of bytes in the downloaded feed data.
  // Only populated if the update successfully downloaded data.
  optional int32 content_length = 8;
  // Hash of the downloaded feed data. This is used to skip updates
  // if the feed data hasn't changed.
  // Only populated if the update successfully downloaded data.
  optional string content_hash = 9;
  // Error message of the update.
  // Only populated if the update finished in an error
  optional string error_message = 10;
}

message UpdateFeedReply {
  FeedUpdate feed_update = 1;
}

message GetSchedulerStatusRequest {}

message GetSchedulerStatusReply {
  message Feed {
    string system_id = 1;
    FeedConfig feed_config = 7;
    int64 last_successful_update = 4;
    int64 last_finished_update = 5;
    bool currently_running = 6;
  }
  repeated Feed feeds = 1;
}

message ResetSchedulerRequest {}

message ResetSchedulerReply {}

message GetLogLevelRequest {}
message GetLogLevelReply {
  string log_level = 1;
}
message SetLogLevelRequest {
  string log_level = 1;
}
message SetLogLevelReply {}
