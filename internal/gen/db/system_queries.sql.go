// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: system_queries.sql

package db

import (
	"context"
)

const deleteSystem = `-- name: DeleteSystem :exec
DELETE FROM system WHERE pk = $1
`

func (q *Queries) DeleteSystem(ctx context.Context, pk int64) error {
	_, err := q.db.Exec(ctx, deleteSystem, pk)
	return err
}

const insertSystem = `-- name: InsertSystem :one
INSERT INTO system (id, name, status) 
VALUES ($1, $2, $3)
RETURNING pk
`

type InsertSystemParams struct {
	ID     string
	Name   string
	Status string
}

func (q *Queries) InsertSystem(ctx context.Context, arg InsertSystemParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertSystem, arg.ID, arg.Name, arg.Status)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

const listSystemIDs = `-- name: ListSystemIDs :many
SELECT id FROM system
`

func (q *Queries) ListSystemIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listSystemIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSystem = `-- name: UpdateSystem :exec
UPDATE system 
SET
    name = $1
WHERE pk = $2
`

type UpdateSystemParams struct {
	Name string
	Pk   int64
}

func (q *Queries) UpdateSystem(ctx context.Context, arg UpdateSystemParams) error {
	_, err := q.db.Exec(ctx, updateSystem, arg.Name, arg.Pk)
	return err
}

const updateSystemStatus = `-- name: UpdateSystemStatus :exec
UPDATE system 
SET
    status = $1
WHERE pk = $2
`

type UpdateSystemStatusParams struct {
	Status string
	Pk     int64
}

func (q *Queries) UpdateSystemStatus(ctx context.Context, arg UpdateSystemStatusParams) error {
	_, err := q.db.Exec(ctx, updateSystemStatus, arg.Status, arg.Pk)
	return err
}
