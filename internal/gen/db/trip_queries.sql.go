// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: trip_queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteStaleTrips = `-- name: DeleteStaleTrips :many
DELETE FROM trip
USING feed_update
WHERE 
    feed_update.pk = trip.source_pk
    AND feed_update.feed_pk = $1
    AND feed_update.pk != $2
RETURNING trip.route_pk
`

type DeleteStaleTripsParams struct {
	FeedPk   int64
	UpdatePk int64
}

// TODO: These DeleteStaleT queries can be simpler and just take the update_pk
func (q *Queries) DeleteStaleTrips(ctx context.Context, arg DeleteStaleTripsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, deleteStaleTrips, arg.FeedPk, arg.UpdatePk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var route_pk int64
		if err := rows.Scan(&route_pk); err != nil {
			return nil, err
		}
		items = append(items, route_pk)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteTripStopTimes = `-- name: DeleteTripStopTimes :exec
DELETE FROM trip_stop_time
WHERE pk = ANY($1::bigint[])
`

func (q *Queries) DeleteTripStopTimes(ctx context.Context, pks []int64) error {
	_, err := q.db.Exec(ctx, deleteTripStopTimes, pks)
	return err
}

const insertTrip = `-- name: InsertTrip :one
INSERT INTO trip
    (id, route_pk, source_pk, direction_id, started_at)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING pk
`

type InsertTripParams struct {
	ID          string
	RoutePk     int64
	SourcePk    int64
	DirectionID sql.NullBool
	StartedAt   sql.NullTime
}

func (q *Queries) InsertTrip(ctx context.Context, arg InsertTripParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertTrip,
		arg.ID,
		arg.RoutePk,
		arg.SourcePk,
		arg.DirectionID,
		arg.StartedAt,
	)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

const insertTripStopTime = `-- name: InsertTripStopTime :exec
INSERT INTO trip_stop_time
    (stop_pk, trip_pk, arrival_time, arrival_delay, arrival_uncertainty,
     departure_time, departure_delay, departure_uncertainty, stop_sequence, track, headsign, past)
VALUES
    ($1, $2, $3, $4,
     $5, $6, $7,
     $8, $9, $10, $11, FALSE)
`

type InsertTripStopTimeParams struct {
	StopPk               int64
	TripPk               int64
	ArrivalTime          sql.NullTime
	ArrivalDelay         sql.NullInt32
	ArrivalUncertainty   sql.NullInt32
	DepartureTime        sql.NullTime
	DepartureDelay       sql.NullInt32
	DepartureUncertainty sql.NullInt32
	StopSequence         int32
	Track                sql.NullString
	Headsign             sql.NullString
}

func (q *Queries) InsertTripStopTime(ctx context.Context, arg InsertTripStopTimeParams) error {
	_, err := q.db.Exec(ctx, insertTripStopTime,
		arg.StopPk,
		arg.TripPk,
		arg.ArrivalTime,
		arg.ArrivalDelay,
		arg.ArrivalUncertainty,
		arg.DepartureTime,
		arg.DepartureDelay,
		arg.DepartureUncertainty,
		arg.StopSequence,
		arg.Track,
		arg.Headsign,
	)
	return err
}

const listTripStopTimesForUpdate = `-- name: ListTripStopTimesForUpdate :many
SELECT pk, trip_pk, stop_pk, stop_sequence, past FROM trip_stop_time
WHERE trip_pk = ANY($1::bigint[])
ORDER BY trip_pk, stop_sequence
`

type ListTripStopTimesForUpdateRow struct {
	Pk           int64
	TripPk       int64
	StopPk       int64
	StopSequence int32
	Past         bool
}

func (q *Queries) ListTripStopTimesForUpdate(ctx context.Context, tripPks []int64) ([]ListTripStopTimesForUpdateRow, error) {
	rows, err := q.db.Query(ctx, listTripStopTimesForUpdate, tripPks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTripStopTimesForUpdateRow
	for rows.Next() {
		var i ListTripStopTimesForUpdateRow
		if err := rows.Scan(
			&i.Pk,
			&i.TripPk,
			&i.StopPk,
			&i.StopSequence,
			&i.Past,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTripsForUpdate = `-- name: ListTripsForUpdate :many
SELECT trip.pk, trip.id, trip.route_pk, trip.direction_id
FROM trip
WHERE
    trip.route_pk = ANY($1::bigint[])
`

type ListTripsForUpdateRow struct {
	Pk          int64
	ID          string
	RoutePk     int64
	DirectionID sql.NullBool
}

func (q *Queries) ListTripsForUpdate(ctx context.Context, routePks []int64) ([]ListTripsForUpdateRow, error) {
	rows, err := q.db.Query(ctx, listTripsForUpdate, routePks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTripsForUpdateRow
	for rows.Next() {
		var i ListTripsForUpdateRow
		if err := rows.Scan(
			&i.Pk,
			&i.ID,
			&i.RoutePk,
			&i.DirectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTripStopTimesPast = `-- name: MarkTripStopTimesPast :exec
UPDATE trip_stop_time
SET
    past = TRUE
WHERE
    trip_pk = $1
    AND stop_sequence < $2
`

type MarkTripStopTimesPastParams struct {
	TripPk              int64
	CurrentStopSequence int32
}

func (q *Queries) MarkTripStopTimesPast(ctx context.Context, arg MarkTripStopTimesPastParams) error {
	_, err := q.db.Exec(ctx, markTripStopTimesPast, arg.TripPk, arg.CurrentStopSequence)
	return err
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE trip SET 
    source_pk = $1,
    direction_id = $2,
    started_at = $3
WHERE pk = $4
`

type UpdateTripParams struct {
	SourcePk    int64
	DirectionID sql.NullBool
	StartedAt   sql.NullTime
	Pk          int64
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip,
		arg.SourcePk,
		arg.DirectionID,
		arg.StartedAt,
		arg.Pk,
	)
	return err
}

const updateTripStopTime = `-- name: UpdateTripStopTime :exec
UPDATE trip_stop_time
SET
    stop_pk = $1,
    arrival_time = $2,
    arrival_delay = $3,
    arrival_uncertainty = $4,
    departure_time = $5,
    departure_delay = $6,
    departure_uncertainty = $7,
    stop_sequence = $8,
    track = $9,
    headsign = $10,
    past = FALSE
WHERE
    pk = $11
`

type UpdateTripStopTimeParams struct {
	StopPk               int64
	ArrivalTime          sql.NullTime
	ArrivalDelay         sql.NullInt32
	ArrivalUncertainty   sql.NullInt32
	DepartureTime        sql.NullTime
	DepartureDelay       sql.NullInt32
	DepartureUncertainty sql.NullInt32
	StopSequence         int32
	Track                sql.NullString
	Headsign             sql.NullString
	Pk                   int64
}

func (q *Queries) UpdateTripStopTime(ctx context.Context, arg UpdateTripStopTimeParams) error {
	_, err := q.db.Exec(ctx, updateTripStopTime,
		arg.StopPk,
		arg.ArrivalTime,
		arg.ArrivalDelay,
		arg.ArrivalUncertainty,
		arg.DepartureTime,
		arg.DepartureDelay,
		arg.DepartureUncertainty,
		arg.StopSequence,
		arg.Track,
		arg.Headsign,
		arg.Pk,
	)
	return err
}
