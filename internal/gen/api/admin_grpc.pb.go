// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// Get the config for a system
	//
	// `GET /systems/<system_id>/config`
	GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfig, error)
	// Install or update a system
	//
	// `PUT /systems/<system_id>`
	//
	// Installs or updates the system based on the configuration provided in the
	// request payload.
	// If the system does not exist an install is performed; otherwise an update.
	InstallOrUpdateSystem(ctx context.Context, in *InstallOrUpdateSystemRequest, opts ...grpc.CallOption) (*InstallOrUpdateSystemReply, error)
	// Delete a system
	//
	// `DELETE /systems/<system_id>`
	//
	// Deletes the specified system.
	DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemReply, error)
	// Update a feed
	//
	// `POST /systems/<system_id>/feeds/<feed_id>`
	//
	// Triggers a feed update for the specified feed.
	UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedReply, error)
	// Get scheduler status
	//
	// `GET /scheduler`
	//
	// Gets the status of the scheduler.
	GetSchedulerStatus(ctx context.Context, in *GetSchedulerStatusRequest, opts ...grpc.CallOption) (*GetSchedulerStatusReply, error)
	// Reset scheduler
	//
	// `POST /scheduler`
	//
	// Performs a full restart of the scheduler, with all scheduler
	//
	//	configurations retrieved fresh from the database.
	//
	// In general this endpoint should never be needed;
	//
	//	 Transiter automatically restarts the scheduler when needed.
	//	The main usecase is when the Postgres configuration is manually
	//	 updated and the scheduler needs to see the update.
	ResetScheduler(ctx context.Context, in *ResetSchedulerRequest, opts ...grpc.CallOption) (*ResetSchedulerReply, error)
	// Garbage collect feed updates
	//
	// `POST /gcfeedupdates`
	//
	// Deletes feed updates that are older than a week, with the exception that
	// the most recent succesful update for each feed is always retained.
	//
	// This method exists to avoid unbounded growth in the feed updates database table.
	// It is called periodically by the scheduler.
	GarbageCollectFeedUpdates(ctx context.Context, in *GarbageCollectFeedUpdatesRequest, opts ...grpc.CallOption) (*GarbageCollectFeedUpdatesReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*SystemConfig, error) {
	out := new(SystemConfig)
	err := c.cc.Invoke(ctx, "/Admin/GetSystemConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InstallOrUpdateSystem(ctx context.Context, in *InstallOrUpdateSystemRequest, opts ...grpc.CallOption) (*InstallOrUpdateSystemReply, error) {
	out := new(InstallOrUpdateSystemReply)
	err := c.cc.Invoke(ctx, "/Admin/InstallOrUpdateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemReply, error) {
	out := new(DeleteSystemReply)
	err := c.cc.Invoke(ctx, "/Admin/DeleteSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedReply, error) {
	out := new(UpdateFeedReply)
	err := c.cc.Invoke(ctx, "/Admin/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSchedulerStatus(ctx context.Context, in *GetSchedulerStatusRequest, opts ...grpc.CallOption) (*GetSchedulerStatusReply, error) {
	out := new(GetSchedulerStatusReply)
	err := c.cc.Invoke(ctx, "/Admin/GetSchedulerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ResetScheduler(ctx context.Context, in *ResetSchedulerRequest, opts ...grpc.CallOption) (*ResetSchedulerReply, error) {
	out := new(ResetSchedulerReply)
	err := c.cc.Invoke(ctx, "/Admin/ResetScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GarbageCollectFeedUpdates(ctx context.Context, in *GarbageCollectFeedUpdatesRequest, opts ...grpc.CallOption) (*GarbageCollectFeedUpdatesReply, error) {
	out := new(GarbageCollectFeedUpdatesReply)
	err := c.cc.Invoke(ctx, "/Admin/GarbageCollectFeedUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations should embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// Get the config for a system
	//
	// `GET /systems/<system_id>/config`
	GetSystemConfig(context.Context, *GetSystemConfigRequest) (*SystemConfig, error)
	// Install or update a system
	//
	// `PUT /systems/<system_id>`
	//
	// Installs or updates the system based on the configuration provided in the
	// request payload.
	// If the system does not exist an install is performed; otherwise an update.
	InstallOrUpdateSystem(context.Context, *InstallOrUpdateSystemRequest) (*InstallOrUpdateSystemReply, error)
	// Delete a system
	//
	// `DELETE /systems/<system_id>`
	//
	// Deletes the specified system.
	DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemReply, error)
	// Update a feed
	//
	// `POST /systems/<system_id>/feeds/<feed_id>`
	//
	// Triggers a feed update for the specified feed.
	UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedReply, error)
	// Get scheduler status
	//
	// `GET /scheduler`
	//
	// Gets the status of the scheduler.
	GetSchedulerStatus(context.Context, *GetSchedulerStatusRequest) (*GetSchedulerStatusReply, error)
	// Reset scheduler
	//
	// `POST /scheduler`
	//
	// Performs a full restart of the scheduler, with all scheduler
	//
	//	configurations retrieved fresh from the database.
	//
	// In general this endpoint should never be needed;
	//
	//	 Transiter automatically restarts the scheduler when needed.
	//	The main usecase is when the Postgres configuration is manually
	//	 updated and the scheduler needs to see the update.
	ResetScheduler(context.Context, *ResetSchedulerRequest) (*ResetSchedulerReply, error)
	// Garbage collect feed updates
	//
	// `POST /gcfeedupdates`
	//
	// Deletes feed updates that are older than a week, with the exception that
	// the most recent succesful update for each feed is always retained.
	//
	// This method exists to avoid unbounded growth in the feed updates database table.
	// It is called periodically by the scheduler.
	GarbageCollectFeedUpdates(context.Context, *GarbageCollectFeedUpdatesRequest) (*GarbageCollectFeedUpdatesReply, error)
}

// UnimplementedAdminServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) GetSystemConfig(context.Context, *GetSystemConfigRequest) (*SystemConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConfig not implemented")
}
func (UnimplementedAdminServer) InstallOrUpdateSystem(context.Context, *InstallOrUpdateSystemRequest) (*InstallOrUpdateSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallOrUpdateSystem not implemented")
}
func (UnimplementedAdminServer) DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystem not implemented")
}
func (UnimplementedAdminServer) UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (UnimplementedAdminServer) GetSchedulerStatus(context.Context, *GetSchedulerStatusRequest) (*GetSchedulerStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerStatus not implemented")
}
func (UnimplementedAdminServer) ResetScheduler(context.Context, *ResetSchedulerRequest) (*ResetSchedulerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetScheduler not implemented")
}
func (UnimplementedAdminServer) GarbageCollectFeedUpdates(context.Context, *GarbageCollectFeedUpdatesRequest) (*GarbageCollectFeedUpdatesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GarbageCollectFeedUpdates not implemented")
}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_GetSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/GetSystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSystemConfig(ctx, req.(*GetSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InstallOrUpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallOrUpdateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InstallOrUpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/InstallOrUpdateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InstallOrUpdateSystem(ctx, req.(*InstallOrUpdateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/DeleteSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteSystem(ctx, req.(*DeleteSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateFeed(ctx, req.(*UpdateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSchedulerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSchedulerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/GetSchedulerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSchedulerStatus(ctx, req.(*GetSchedulerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ResetScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ResetScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/ResetScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ResetScheduler(ctx, req.(*ResetSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GarbageCollectFeedUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GarbageCollectFeedUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GarbageCollectFeedUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Admin/GarbageCollectFeedUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GarbageCollectFeedUpdates(ctx, req.(*GarbageCollectFeedUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemConfig",
			Handler:    _Admin_GetSystemConfig_Handler,
		},
		{
			MethodName: "InstallOrUpdateSystem",
			Handler:    _Admin_InstallOrUpdateSystem_Handler,
		},
		{
			MethodName: "DeleteSystem",
			Handler:    _Admin_DeleteSystem_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _Admin_UpdateFeed_Handler,
		},
		{
			MethodName: "GetSchedulerStatus",
			Handler:    _Admin_GetSchedulerStatus_Handler,
		},
		{
			MethodName: "ResetScheduler",
			Handler:    _Admin_ResetScheduler_Handler,
		},
		{
			MethodName: "GarbageCollectFeedUpdates",
			Handler:    _Admin_GarbageCollectFeedUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin.proto",
}
