// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: api/admin.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transiter runs a background task called the scheduler which performs feed updates automatically.
// A scheduling policy determines when the scheduler will perform feed updates for this feed.
type FeedConfig_SchedulingPolicy int32

const (
	// Use the default policy, which is PERIODIC for GTFS realtime feeds and DAILY for all other feeds.
	FeedConfig_DEFAULT FeedConfig_SchedulingPolicy = 0
	// Perform an update periodically, with the period specified in the `periodic_update_period_ms` field.
	FeedConfig_PERIODIC FeedConfig_SchedulingPolicy = 1
	// Perform an update once a day, with the time of day specified in the `daily_update_time` field.
	FeedConfig_DAILY FeedConfig_SchedulingPolicy = 2
	// Don't perform updates in the scheduler. Updates can always be triggered manually using the admin API.
	FeedConfig_NONE FeedConfig_SchedulingPolicy = 3
)

// Enum value maps for FeedConfig_SchedulingPolicy.
var (
	FeedConfig_SchedulingPolicy_name = map[int32]string{
		0: "DEFAULT",
		1: "PERIODIC",
		2: "DAILY",
		3: "NONE",
	}
	FeedConfig_SchedulingPolicy_value = map[string]int32{
		"DEFAULT":  0,
		"PERIODIC": 1,
		"DAILY":    2,
		"NONE":     3,
	}
)

func (x FeedConfig_SchedulingPolicy) Enum() *FeedConfig_SchedulingPolicy {
	p := new(FeedConfig_SchedulingPolicy)
	*p = x
	return p
}

func (x FeedConfig_SchedulingPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedConfig_SchedulingPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[0].Descriptor()
}

func (FeedConfig_SchedulingPolicy) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[0]
}

func (x FeedConfig_SchedulingPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedConfig_SchedulingPolicy.Descriptor instead.
func (FeedConfig_SchedulingPolicy) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7, 0}
}

type GtfsRealtimeOptions_Extension int32

const (
	GtfsRealtimeOptions_NO_EXTENSION GtfsRealtimeOptions_Extension = 0
	GtfsRealtimeOptions_NYCT_TRIPS   GtfsRealtimeOptions_Extension = 1
	GtfsRealtimeOptions_NYCT_ALERTS  GtfsRealtimeOptions_Extension = 2
)

// Enum value maps for GtfsRealtimeOptions_Extension.
var (
	GtfsRealtimeOptions_Extension_name = map[int32]string{
		0: "NO_EXTENSION",
		1: "NYCT_TRIPS",
		2: "NYCT_ALERTS",
	}
	GtfsRealtimeOptions_Extension_value = map[string]int32{
		"NO_EXTENSION": 0,
		"NYCT_TRIPS":   1,
		"NYCT_ALERTS":  2,
	}
)

func (x GtfsRealtimeOptions_Extension) Enum() *GtfsRealtimeOptions_Extension {
	p := new(GtfsRealtimeOptions_Extension)
	*p = x
	return p
}

func (x GtfsRealtimeOptions_Extension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GtfsRealtimeOptions_Extension) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[1].Descriptor()
}

func (GtfsRealtimeOptions_Extension) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[1]
}

func (x GtfsRealtimeOptions_Extension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GtfsRealtimeOptions_Extension.Descriptor instead.
func (GtfsRealtimeOptions_Extension) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 0}
}

type GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy int32

const (
	GtfsRealtimeOptions_NyctAlertsOptions_NO_DEDUPLICATION       GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy = 0
	GtfsRealtimeOptions_NyctAlertsOptions_DEDUPLICATE_IN_STATION GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy = 1
	GtfsRealtimeOptions_NyctAlertsOptions_DEDUPLICATE_IN_COMPLEX GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy = 2
)

// Enum value maps for GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy.
var (
	GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy_name = map[int32]string{
		0: "NO_DEDUPLICATION",
		1: "DEDUPLICATE_IN_STATION",
		2: "DEDUPLICATE_IN_COMPLEX",
	}
	GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy_value = map[string]int32{
		"NO_DEDUPLICATION":       0,
		"DEDUPLICATE_IN_STATION": 1,
		"DEDUPLICATE_IN_COMPLEX": 2,
	}
)

func (x GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Enum() *GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy {
	p := new(GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy)
	*p = x
	return p
}

func (x GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[2].Descriptor()
}

func (GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[2]
}

func (x GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy.Descriptor instead.
func (GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 1, 0}
}

// Source describes the possible sources for service maps.
type ServiceMapConfig_Source int32

const (
	// Build the service maps using the GTFS static data.
	ServiceMapConfig_STATIC ServiceMapConfig_Source = 0
	// Build the service maps using the GTFS realtime data.
	ServiceMapConfig_REALTIME ServiceMapConfig_Source = 1
)

// Enum value maps for ServiceMapConfig_Source.
var (
	ServiceMapConfig_Source_name = map[int32]string{
		0: "STATIC",
		1: "REALTIME",
	}
	ServiceMapConfig_Source_value = map[string]int32{
		"STATIC":   0,
		"REALTIME": 1,
	}
)

func (x ServiceMapConfig_Source) Enum() *ServiceMapConfig_Source {
	p := new(ServiceMapConfig_Source)
	*p = x
	return p
}

func (x ServiceMapConfig_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceMapConfig_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[3].Descriptor()
}

func (ServiceMapConfig_Source) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[3]
}

func (x ServiceMapConfig_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceMapConfig_Source.Descriptor instead.
func (ServiceMapConfig_Source) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{9, 0}
}

type FeedUpdate_Status int32

const (
	// Unknown status.
	FeedUpdate_UNKNOWN FeedUpdate_Status = 0
	// Feed update is in progress. Currently this status never appears in the admin API, but is
	// added in case Transiter support async feed updates in the future.
	FeedUpdate_RUNNING FeedUpdate_Status = 1
	// Finished successfully.
	FeedUpdate_UPDATED FeedUpdate_Status = 2
	// The update was skipped because the downloaded data was identical to the data for the last successful update.
	FeedUpdate_SKIPPED FeedUpdate_Status = 3
	// Failed to download feed data.
	FeedUpdate_FAILED_DOWNLOAD_ERROR FeedUpdate_Status = 4
	// Feed data was empty.
	FeedUpdate_FAILED_EMPTY_FEED FeedUpdate_Status = 5
	// The feed configuration is invalid. This typically indicates a bug in Transiter because
	// the feed configuration is validated when the system is being installed.
	FeedUpdate_FAILED_INVALID_FEED_CONFIG FeedUpdate_Status = 6
	// Failed to parse the feed data.
	// This means the feed data was corrupted or otherwise invalid.
	FeedUpdate_FAILED_PARSE_ERROR FeedUpdate_Status = 8
	// Failed to update the database using the new feed data.
	// This typically indicates a bug in Transiter or a transient error connecting to the database.
	FeedUpdate_FAILED_UPDATE_ERROR FeedUpdate_Status = 9
	// An internal unspecified error occured.
	FeedUpdate_FAILED_INTERNAL_ERROR FeedUpdate_Status = 10
	// The feed has an unknown type.
	FeedUpdate_FAILED_UNKNOWN_FEED_TYPE FeedUpdate_Status = 11
)

// Enum value maps for FeedUpdate_Status.
var (
	FeedUpdate_Status_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "RUNNING",
		2:  "UPDATED",
		3:  "SKIPPED",
		4:  "FAILED_DOWNLOAD_ERROR",
		5:  "FAILED_EMPTY_FEED",
		6:  "FAILED_INVALID_FEED_CONFIG",
		8:  "FAILED_PARSE_ERROR",
		9:  "FAILED_UPDATE_ERROR",
		10: "FAILED_INTERNAL_ERROR",
		11: "FAILED_UNKNOWN_FEED_TYPE",
	}
	FeedUpdate_Status_value = map[string]int32{
		"UNKNOWN":                    0,
		"RUNNING":                    1,
		"UPDATED":                    2,
		"SKIPPED":                    3,
		"FAILED_DOWNLOAD_ERROR":      4,
		"FAILED_EMPTY_FEED":          5,
		"FAILED_INVALID_FEED_CONFIG": 6,
		"FAILED_PARSE_ERROR":         8,
		"FAILED_UPDATE_ERROR":        9,
		"FAILED_INTERNAL_ERROR":      10,
		"FAILED_UNKNOWN_FEED_TYPE":   11,
	}
)

func (x FeedUpdate_Status) Enum() *FeedUpdate_Status {
	p := new(FeedUpdate_Status)
	*p = x
	return p
}

func (x FeedUpdate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedUpdate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_admin_proto_enumTypes[4].Descriptor()
}

func (FeedUpdate_Status) Type() protoreflect.EnumType {
	return &file_api_admin_proto_enumTypes[4]
}

func (x FeedUpdate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedUpdate_Status.Descriptor instead.
func (FeedUpdate_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{11, 0}
}

type GetSystemConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
}

func (x *GetSystemConfigRequest) Reset() {
	*x = GetSystemConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemConfigRequest) ProtoMessage() {}

func (x *GetSystemConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSystemConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{0}
}

func (x *GetSystemConfigRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

type InstallOrUpdateSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the system to install or update.
	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// Types that are assignable to Config:
	//
	//	*InstallOrUpdateSystemRequest_SystemConfig
	//	*InstallOrUpdateSystemRequest_YamlConfig
	Config isInstallOrUpdateSystemRequest_Config `protobuf_oneof:"config"`
	// If true, do not perform an update if the system already exists.
	InstallOnly bool `protobuf:"varint,4,opt,name=install_only,json=installOnly,proto3" json:"install_only,omitempty"`
}

func (x *InstallOrUpdateSystemRequest) Reset() {
	*x = InstallOrUpdateSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOrUpdateSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOrUpdateSystemRequest) ProtoMessage() {}

func (x *InstallOrUpdateSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOrUpdateSystemRequest.ProtoReflect.Descriptor instead.
func (*InstallOrUpdateSystemRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{1}
}

func (x *InstallOrUpdateSystemRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (m *InstallOrUpdateSystemRequest) GetConfig() isInstallOrUpdateSystemRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetSystemConfig() *SystemConfig {
	if x, ok := x.GetConfig().(*InstallOrUpdateSystemRequest_SystemConfig); ok {
		return x.SystemConfig
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetYamlConfig() *TextConfig {
	if x, ok := x.GetConfig().(*InstallOrUpdateSystemRequest_YamlConfig); ok {
		return x.YamlConfig
	}
	return nil
}

func (x *InstallOrUpdateSystemRequest) GetInstallOnly() bool {
	if x != nil {
		return x.InstallOnly
	}
	return false
}

type isInstallOrUpdateSystemRequest_Config interface {
	isInstallOrUpdateSystemRequest_Config()
}

type InstallOrUpdateSystemRequest_SystemConfig struct {
	SystemConfig *SystemConfig `protobuf:"bytes,2,opt,name=system_config,json=systemConfig,proto3,oneof"`
}

type InstallOrUpdateSystemRequest_YamlConfig struct {
	YamlConfig *TextConfig `protobuf:"bytes,3,opt,name=yaml_config,json=yamlConfig,proto3,oneof"` // TODO: TextConfig json_config = 4;
}

func (*InstallOrUpdateSystemRequest_SystemConfig) isInstallOrUpdateSystemRequest_Config() {}

func (*InstallOrUpdateSystemRequest_YamlConfig) isInstallOrUpdateSystemRequest_Config() {}

// TextConfig contains a Transiter system configuration in non-proto format
// (e.g. YAML or JSON).
type TextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*TextConfig_Url
	//	*TextConfig_Content
	Source isTextConfig_Source `protobuf_oneof:"source"`
	// Whether the config is a template. If true the config will first be processed
	// using Go's template library.
	IsTemplate bool `protobuf:"varint,3,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`
	// Arguments to pass to Go's template library if the config is a template.
	//
	// In general as much information as possible should be in the config itself.
	// The template args are intended for things like API keys which are secret
	// and/or different for each person that installs the system.
	TemplateArgs map[string]string `protobuf:"bytes,4,rep,name=template_args,json=templateArgs,proto3" json:"template_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TextConfig) Reset() {
	*x = TextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextConfig) ProtoMessage() {}

func (x *TextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextConfig.ProtoReflect.Descriptor instead.
func (*TextConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{2}
}

func (m *TextConfig) GetSource() isTextConfig_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *TextConfig) GetUrl() string {
	if x, ok := x.GetSource().(*TextConfig_Url); ok {
		return x.Url
	}
	return ""
}

func (x *TextConfig) GetContent() string {
	if x, ok := x.GetSource().(*TextConfig_Content); ok {
		return x.Content
	}
	return ""
}

func (x *TextConfig) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *TextConfig) GetTemplateArgs() map[string]string {
	if x != nil {
		return x.TemplateArgs
	}
	return nil
}

type isTextConfig_Source interface {
	isTextConfig_Source()
}

type TextConfig_Url struct {
	// A URL where the config can be retrieved from using a simple GET request.
	// If the URL requires a more complex interaction (authentication, a different
	// HTTP verb), the config should be retrieved outside of Transiter and provided
	// in the content field.
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type TextConfig_Content struct {
	// The text content of the config.
	Content string `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*TextConfig_Url) isTextConfig_Source() {}

func (*TextConfig_Content) isTextConfig_Source() {}

type InstallOrUpdateSystemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId     string        `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	SystemConfig *SystemConfig `protobuf:"bytes,2,opt,name=system_config,json=systemConfig,proto3" json:"system_config,omitempty"`
}

func (x *InstallOrUpdateSystemReply) Reset() {
	*x = InstallOrUpdateSystemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOrUpdateSystemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOrUpdateSystemReply) ProtoMessage() {}

func (x *InstallOrUpdateSystemReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOrUpdateSystemReply.ProtoReflect.Descriptor instead.
func (*InstallOrUpdateSystemReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{3}
}

func (x *InstallOrUpdateSystemReply) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *InstallOrUpdateSystemReply) GetSystemConfig() *SystemConfig {
	if x != nil {
		return x.SystemConfig
	}
	return nil
}

type DeleteSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
}

func (x *DeleteSystemRequest) Reset() {
	*x = DeleteSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemRequest) ProtoMessage() {}

func (x *DeleteSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteSystemRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSystemRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

type DeleteSystemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSystemReply) Reset() {
	*x = DeleteSystemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSystemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemReply) ProtoMessage() {}

func (x *DeleteSystemReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemReply.ProtoReflect.Descriptor instead.
func (*DeleteSystemReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{5}
}

// Configuration for a system.
type SystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the system.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration for the system's feeds.
	Feeds []*FeedConfig `protobuf:"bytes,2,rep,name=feeds,proto3" json:"feeds,omitempty"`
	// Configuration for the system's service maps.
	ServiceMaps []*ServiceMapConfig `protobuf:"bytes,3,rep,name=service_maps,json=serviceMaps,proto3" json:"service_maps,omitempty"`
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{6}
}

func (x *SystemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemConfig) GetFeeds() []*FeedConfig {
	if x != nil {
		return x.Feeds
	}
	return nil
}

func (x *SystemConfig) GetServiceMaps() []*ServiceMapConfig {
	if x != nil {
		return x.ServiceMaps
	}
	return nil
}

type FeedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of this feed config.
	// This must be unique within the system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of the feed.
	// Allowable values are `GTFS_STATIC`, `GTFS_REALTIME` and `NYCT_SUBWAY_CSV`.
	//
	// The are possible future plans to support plugging in additional custom types at build time.
	// This is why the field is a string and not an enum.
	Type string `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	// Deprecated: use `type` instead.
	//
	// Deprecated: Marked as deprecated in api/admin.proto.
	Parser string `protobuf:"bytes,8,opt,name=parser,proto3" json:"parser,omitempty"`
	// Additional options GTFS realtime feeds.
	GtfsRealtimeOptions *GtfsRealtimeOptions `protobuf:"bytes,9,opt,name=gtfs_realtime_options,json=gtfsRealtimeOptions,proto3,oneof" json:"gtfs_realtime_options,omitempty"`
	// Required for install specifies whether an update should be performed for this feed during system install.
	// If true, an update is performed and if the update fails the installation fails.
	//
	// If unspecified, defaults to false for GTFS realtime feeds and true for all other
	// types of feeds.
	RequiredForInstall *bool `protobuf:"varint,2,opt,name=required_for_install,json=requiredForInstall,proto3,oneof" json:"required_for_install,omitempty"`
	// The scheduling policy to use for this feed.
	//
	// If unspecified, it takes the value `DEFAULT“.
	SchedulingPolicy FeedConfig_SchedulingPolicy `protobuf:"varint,14,opt,name=scheduling_policy,json=schedulingPolicy,proto3,enum=FeedConfig_SchedulingPolicy" json:"scheduling_policy,omitempty"`
	// Deprecated: use `scheduling_policy` instead.
	//
	// Deprecated: Marked as deprecated in api/admin.proto.
	UpdateStrategy FeedConfig_SchedulingPolicy `protobuf:"varint,3,opt,name=update_strategy,json=updateStrategy,proto3,enum=FeedConfig_SchedulingPolicy" json:"update_strategy,omitempty"`
	// For feeds with a `PERIODIC` scheduling policy, the update period.
	//
	// If unspecified, defaults to 5 seconds.
	PeriodicUpdatePeriodMs *int64 `protobuf:"varint,10,opt,name=periodic_update_period_ms,json=periodicUpdatePeriodMs,proto3,oneof" json:"periodic_update_period_ms,omitempty"`
	// Deprecated: use `periodic_update_period_ms` instead.
	//
	// Deprecated: Marked as deprecated in api/admin.proto.
	UpdatePeriodS *float64 `protobuf:"fixed64,4,opt,name=update_period_s,json=updatePeriodS,proto3,oneof" json:"update_period_s,omitempty"`
	// For feeds with a `DAILY` scheduling policy,
	// the time of day in the form HH:MM at which to perform an update.
	//
	// If unspecified, defaults to 03:00 for the first feed in the system, 03:10 for the second feed,
	// and so on.
	// The idea of the default is to run at night when the system is either quiet or not running.
	// The staggering is to avoid updates stepping on each other, and to spread out the load.
	DailyUpdateTime string `protobuf:"bytes,11,opt,name=daily_update_time,json=dailyUpdateTime,proto3" json:"daily_update_time,omitempty"`
	// For feeds with a `DAILY` scheduling policy,
	// the timezone for the time of day specified in the `daily_update_time`.
	//
	// If empty, a default is provided as follows.
	// The scheduler lists the agencies for the system in order of ID and uses
	// the first valid timezone it finds.
	// Given the GTFS static specification this should always work.
	// Moreover, all agencies should have the same timezone so listing in order of ID shouldn't matter.
	// But in reality it may not work.
	// If there is no valid agency timezones, the scheduler will log a warning and fall back to UTC.
	DailyUpdateTimezone string `protobuf:"bytes,12,opt,name=daily_update_timezone,json=dailyUpdateTimezone,proto3" json:"daily_update_timezone,omitempty"`
	// URL at which the feed can be downloaded using a HTTP GET request.
	// Transiter does not currently support non-GET requests.
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// Timeout to enforce for the request to the feed URL. If not specified, defaults to 5 seconds.
	RequestTimeoutMs *int64 `protobuf:"varint,6,opt,name=request_timeout_ms,json=requestTimeoutMs,proto3,oneof" json:"request_timeout_ms,omitempty"`
	// HTTP headers to send in the request.
	HttpHeaders map[string]string `protobuf:"bytes,7,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FeedConfig) Reset() {
	*x = FeedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedConfig) ProtoMessage() {}

func (x *FeedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedConfig.ProtoReflect.Descriptor instead.
func (*FeedConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{7}
}

func (x *FeedConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeedConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Marked as deprecated in api/admin.proto.
func (x *FeedConfig) GetParser() string {
	if x != nil {
		return x.Parser
	}
	return ""
}

func (x *FeedConfig) GetGtfsRealtimeOptions() *GtfsRealtimeOptions {
	if x != nil {
		return x.GtfsRealtimeOptions
	}
	return nil
}

func (x *FeedConfig) GetRequiredForInstall() bool {
	if x != nil && x.RequiredForInstall != nil {
		return *x.RequiredForInstall
	}
	return false
}

func (x *FeedConfig) GetSchedulingPolicy() FeedConfig_SchedulingPolicy {
	if x != nil {
		return x.SchedulingPolicy
	}
	return FeedConfig_DEFAULT
}

// Deprecated: Marked as deprecated in api/admin.proto.
func (x *FeedConfig) GetUpdateStrategy() FeedConfig_SchedulingPolicy {
	if x != nil {
		return x.UpdateStrategy
	}
	return FeedConfig_DEFAULT
}

func (x *FeedConfig) GetPeriodicUpdatePeriodMs() int64 {
	if x != nil && x.PeriodicUpdatePeriodMs != nil {
		return *x.PeriodicUpdatePeriodMs
	}
	return 0
}

// Deprecated: Marked as deprecated in api/admin.proto.
func (x *FeedConfig) GetUpdatePeriodS() float64 {
	if x != nil && x.UpdatePeriodS != nil {
		return *x.UpdatePeriodS
	}
	return 0
}

func (x *FeedConfig) GetDailyUpdateTime() string {
	if x != nil {
		return x.DailyUpdateTime
	}
	return ""
}

func (x *FeedConfig) GetDailyUpdateTimezone() string {
	if x != nil {
		return x.DailyUpdateTimezone
	}
	return ""
}

func (x *FeedConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FeedConfig) GetRequestTimeoutMs() int64 {
	if x != nil && x.RequestTimeoutMs != nil {
		return *x.RequestTimeoutMs
	}
	return 0
}

func (x *FeedConfig) GetHttpHeaders() map[string]string {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

// Message describing additional options for the GTFS realtime feeds.
type GtfsRealtimeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extension         GtfsRealtimeOptions_Extension          `protobuf:"varint,1,opt,name=extension,proto3,enum=GtfsRealtimeOptions_Extension" json:"extension,omitempty"`
	NyctTripsOptions  *GtfsRealtimeOptions_NyctTripsOptions  `protobuf:"bytes,2,opt,name=nyct_trips_options,json=nyctTripsOptions,proto3,oneof" json:"nyct_trips_options,omitempty"`
	NyctAlertsOptions *GtfsRealtimeOptions_NyctAlertsOptions `protobuf:"bytes,3,opt,name=nyct_alerts_options,json=nyctAlertsOptions,proto3,oneof" json:"nyct_alerts_options,omitempty"`
	// If true, stop sequences in the GTFS realtime feed data are ignored, and
	// alternative stop sequences are generated and assigned by Transiter.
	// This setting is designed for buggy GTFS realtime feeds in which
	// stop sequences (incorrectly) change between updates. In many cases
	// Transiter is able to generate stop sequences that are correct and
	// stable across updates.
	//
	// This should not be used for systems where a trip can call at the same
	// stop multiple times.
	ReassignStopSequences bool `protobuf:"varint,4,opt,name=reassign_stop_sequences,json=reassignStopSequences,proto3" json:"reassign_stop_sequences,omitempty"`
}

func (x *GtfsRealtimeOptions) Reset() {
	*x = GtfsRealtimeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtfsRealtimeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtfsRealtimeOptions) ProtoMessage() {}

func (x *GtfsRealtimeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtfsRealtimeOptions.ProtoReflect.Descriptor instead.
func (*GtfsRealtimeOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8}
}

func (x *GtfsRealtimeOptions) GetExtension() GtfsRealtimeOptions_Extension {
	if x != nil {
		return x.Extension
	}
	return GtfsRealtimeOptions_NO_EXTENSION
}

func (x *GtfsRealtimeOptions) GetNyctTripsOptions() *GtfsRealtimeOptions_NyctTripsOptions {
	if x != nil {
		return x.NyctTripsOptions
	}
	return nil
}

func (x *GtfsRealtimeOptions) GetNyctAlertsOptions() *GtfsRealtimeOptions_NyctAlertsOptions {
	if x != nil {
		return x.NyctAlertsOptions
	}
	return nil
}

func (x *GtfsRealtimeOptions) GetReassignStopSequences() bool {
	if x != nil {
		return x.ReassignStopSequences
	}
	return false
}

// Description of the configuration for a collection of service maps.
type ServiceMapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of this service maps config.
	// This must be unique within the system.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source of the service maps built using this config.
	Source ServiceMapConfig_Source `protobuf:"varint,2,opt,name=source,proto3,enum=ServiceMapConfig_Source" json:"source,omitempty"`
	// The threshold setting is used to exclude one-off trip schedules from service maps.
	// When calculating a service map, all trips are bucketed based on their schedule.
	// If the threshold is 0.2, trips are only included if the corresponding bucket contains
	// at least 20% of the trips. In particular, a one-off trip whose bucket only contains
	// itself will be excluded if there are many other trips.
	//
	// Note that a trip's schedule is reversed if needed based on the direction ID.
	Threshold float64 `protobuf:"fixed64,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Additional options relevent for static service maps only.
	StaticOptions *ServiceMapConfig_StaticOptions `protobuf:"bytes,4,opt,name=static_options,json=staticOptions,proto3,oneof" json:"static_options,omitempty"`
}

func (x *ServiceMapConfig) Reset() {
	*x = ServiceMapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapConfig) ProtoMessage() {}

func (x *ServiceMapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapConfig.ProtoReflect.Descriptor instead.
func (*ServiceMapConfig) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceMapConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceMapConfig) GetSource() ServiceMapConfig_Source {
	if x != nil {
		return x.Source
	}
	return ServiceMapConfig_STATIC
}

func (x *ServiceMapConfig) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ServiceMapConfig) GetStaticOptions() *ServiceMapConfig_StaticOptions {
	if x != nil {
		return x.StaticOptions
	}
	return nil
}

type UpdateFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	FeedId   string `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	// If true, a full feed update will be performed even if the download data is identical
	// to the last update for this feed.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *UpdateFeedRequest) Reset() {
	*x = UpdateFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeedRequest) ProtoMessage() {}

func (x *UpdateFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeedRequest.ProtoReflect.Descriptor instead.
func (*UpdateFeedRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFeedRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *UpdateFeedRequest) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *UpdateFeedRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Description of a feed update operation.
type FeedUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the feed update. This is a randomly generated UUID.
	// It can be used to find server logs for the update operation.
	UpdateId string `protobuf:"bytes,1,opt,name=update_id,json=updateId,proto3" json:"update_id,omitempty"`
	// The feed configuration that was used to perform the feed update.
	FeedConfig *FeedConfig `protobuf:"bytes,27,opt,name=feed_config,json=feedConfig,proto3" json:"feed_config,omitempty"`
	// Unix timestamp of when the update started.
	StartedAtMs int64 `protobuf:"varint,4,opt,name=started_at_ms,json=startedAtMs,proto3" json:"started_at_ms,omitempty"`
	// Unix timestamp of when the update finished.
	// Only populated if the update is finished.
	FinishedAtMs           *int64 `protobuf:"varint,6,opt,name=finished_at_ms,json=finishedAtMs,proto3,oneof" json:"finished_at_ms,omitempty"`
	TotalLatencyMs         *int64 `protobuf:"varint,20,opt,name=total_latency_ms,json=totalLatencyMs,proto3,oneof" json:"total_latency_ms,omitempty"`
	DownloadLatencyMs      *int64 `protobuf:"varint,21,opt,name=download_latency_ms,json=downloadLatencyMs,proto3,oneof" json:"download_latency_ms,omitempty"`
	ParseLatencyMs         *int64 `protobuf:"varint,22,opt,name=parse_latency_ms,json=parseLatencyMs,proto3,oneof" json:"parse_latency_ms,omitempty"`
	DatabaseLatencyMs      *int64 `protobuf:"varint,25,opt,name=database_latency_ms,json=databaseLatencyMs,proto3,oneof" json:"database_latency_ms,omitempty"`
	DownloadHttpStatusCode *int32 `protobuf:"varint,26,opt,name=download_http_status_code,json=downloadHttpStatusCode,proto3,oneof" json:"download_http_status_code,omitempty"`
	// Status of the update.
	Status FeedUpdate_Status `protobuf:"varint,7,opt,name=status,proto3,enum=FeedUpdate_Status" json:"status,omitempty"`
	// Number of bytes in the downloaded feed data.
	// Only populated if the update successfully downloaded data.
	ContentLength *int32 `protobuf:"varint,8,opt,name=content_length,json=contentLength,proto3,oneof" json:"content_length,omitempty"`
	// Hash of the downloaded feed data. This is used to skip updates
	// if the feed data hasn't changed.
	// Only populated if the update successfully downloaded data.
	ContentHash *string `protobuf:"bytes,9,opt,name=content_hash,json=contentHash,proto3,oneof" json:"content_hash,omitempty"`
	// Error message of the update.
	// Only populated if the update finished in an error
	ErrorMessage *string `protobuf:"bytes,10,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *FeedUpdate) Reset() {
	*x = FeedUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdate) ProtoMessage() {}

func (x *FeedUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdate.ProtoReflect.Descriptor instead.
func (*FeedUpdate) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{11}
}

func (x *FeedUpdate) GetUpdateId() string {
	if x != nil {
		return x.UpdateId
	}
	return ""
}

func (x *FeedUpdate) GetFeedConfig() *FeedConfig {
	if x != nil {
		return x.FeedConfig
	}
	return nil
}

func (x *FeedUpdate) GetStartedAtMs() int64 {
	if x != nil {
		return x.StartedAtMs
	}
	return 0
}

func (x *FeedUpdate) GetFinishedAtMs() int64 {
	if x != nil && x.FinishedAtMs != nil {
		return *x.FinishedAtMs
	}
	return 0
}

func (x *FeedUpdate) GetTotalLatencyMs() int64 {
	if x != nil && x.TotalLatencyMs != nil {
		return *x.TotalLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetDownloadLatencyMs() int64 {
	if x != nil && x.DownloadLatencyMs != nil {
		return *x.DownloadLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetParseLatencyMs() int64 {
	if x != nil && x.ParseLatencyMs != nil {
		return *x.ParseLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetDatabaseLatencyMs() int64 {
	if x != nil && x.DatabaseLatencyMs != nil {
		return *x.DatabaseLatencyMs
	}
	return 0
}

func (x *FeedUpdate) GetDownloadHttpStatusCode() int32 {
	if x != nil && x.DownloadHttpStatusCode != nil {
		return *x.DownloadHttpStatusCode
	}
	return 0
}

func (x *FeedUpdate) GetStatus() FeedUpdate_Status {
	if x != nil {
		return x.Status
	}
	return FeedUpdate_UNKNOWN
}

func (x *FeedUpdate) GetContentLength() int32 {
	if x != nil && x.ContentLength != nil {
		return *x.ContentLength
	}
	return 0
}

func (x *FeedUpdate) GetContentHash() string {
	if x != nil && x.ContentHash != nil {
		return *x.ContentHash
	}
	return ""
}

func (x *FeedUpdate) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type UpdateFeedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedUpdate *FeedUpdate `protobuf:"bytes,1,opt,name=feed_update,json=feedUpdate,proto3" json:"feed_update,omitempty"`
}

func (x *UpdateFeedReply) Reset() {
	*x = UpdateFeedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeedReply) ProtoMessage() {}

func (x *UpdateFeedReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeedReply.ProtoReflect.Descriptor instead.
func (*UpdateFeedReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateFeedReply) GetFeedUpdate() *FeedUpdate {
	if x != nil {
		return x.FeedUpdate
	}
	return nil
}

type GetSchedulerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSchedulerStatusRequest) Reset() {
	*x = GetSchedulerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusRequest) ProtoMessage() {}

func (x *GetSchedulerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{13}
}

type GetSchedulerStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feeds []*GetSchedulerStatusReply_Feed `protobuf:"bytes,1,rep,name=feeds,proto3" json:"feeds,omitempty"`
}

func (x *GetSchedulerStatusReply) Reset() {
	*x = GetSchedulerStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusReply) ProtoMessage() {}

func (x *GetSchedulerStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusReply.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{14}
}

func (x *GetSchedulerStatusReply) GetFeeds() []*GetSchedulerStatusReply_Feed {
	if x != nil {
		return x.Feeds
	}
	return nil
}

type ResetSchedulerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSchedulerRequest) Reset() {
	*x = ResetSchedulerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSchedulerRequest) ProtoMessage() {}

func (x *ResetSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSchedulerRequest.ProtoReflect.Descriptor instead.
func (*ResetSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{15}
}

type ResetSchedulerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSchedulerReply) Reset() {
	*x = ResetSchedulerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSchedulerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSchedulerReply) ProtoMessage() {}

func (x *ResetSchedulerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSchedulerReply.ProtoReflect.Descriptor instead.
func (*ResetSchedulerReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{16}
}

type GetLogLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLogLevelRequest) Reset() {
	*x = GetLogLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogLevelRequest) ProtoMessage() {}

func (x *GetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*GetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{17}
}

type GetLogLevelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
}

func (x *GetLogLevelReply) Reset() {
	*x = GetLogLevelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogLevelReply) ProtoMessage() {}

func (x *GetLogLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogLevelReply.ProtoReflect.Descriptor instead.
func (*GetLogLevelReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{18}
}

func (x *GetLogLevelReply) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

type SetLogLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
}

func (x *SetLogLevelRequest) Reset() {
	*x = SetLogLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelRequest) ProtoMessage() {}

func (x *SetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{19}
}

func (x *SetLogLevelRequest) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

type SetLogLevelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetLogLevelReply) Reset() {
	*x = SetLogLevelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelReply) ProtoMessage() {}

func (x *SetLogLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelReply.ProtoReflect.Descriptor instead.
func (*SetLogLevelReply) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{20}
}

type GtfsRealtimeOptions_NyctTripsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterStaleUnassignedTrips        bool `protobuf:"varint,1,opt,name=filter_stale_unassigned_trips,json=filterStaleUnassignedTrips,proto3" json:"filter_stale_unassigned_trips,omitempty"`
	PreserveMTrainPlatformsInBushwick bool `protobuf:"varint,2,opt,name=preserve_m_train_platforms_in_bushwick,json=preserveMTrainPlatformsInBushwick,proto3" json:"preserve_m_train_platforms_in_bushwick,omitempty"`
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) Reset() {
	*x = GtfsRealtimeOptions_NyctTripsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtfsRealtimeOptions_NyctTripsOptions) ProtoMessage() {}

func (x *GtfsRealtimeOptions_NyctTripsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtfsRealtimeOptions_NyctTripsOptions.ProtoReflect.Descriptor instead.
func (*GtfsRealtimeOptions_NyctTripsOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) GetFilterStaleUnassignedTrips() bool {
	if x != nil {
		return x.FilterStaleUnassignedTrips
	}
	return false
}

func (x *GtfsRealtimeOptions_NyctTripsOptions) GetPreserveMTrainPlatformsInBushwick() bool {
	if x != nil {
		return x.PreserveMTrainPlatformsInBushwick
	}
	return false
}

type GtfsRealtimeOptions_NyctAlertsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElevatorAlertsDeduplicationPolicy   GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy `protobuf:"varint,1,opt,name=elevator_alerts_deduplication_policy,json=elevatorAlertsDeduplicationPolicy,proto3,enum=GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy" json:"elevator_alerts_deduplication_policy,omitempty"`
	ElevatorAlertsInformUsingStationIds bool                                                                    `protobuf:"varint,2,opt,name=elevator_alerts_inform_using_station_ids,json=elevatorAlertsInformUsingStationIds,proto3" json:"elevator_alerts_inform_using_station_ids,omitempty"`
	SkipTimetabledNoServiceAlerts       bool                                                                    `protobuf:"varint,3,opt,name=skip_timetabled_no_service_alerts,json=skipTimetabledNoServiceAlerts,proto3" json:"skip_timetabled_no_service_alerts,omitempty"`
	AddNyctMetadata                     bool                                                                    `protobuf:"varint,4,opt,name=add_nyct_metadata,json=addNyctMetadata,proto3" json:"add_nyct_metadata,omitempty"`
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) Reset() {
	*x = GtfsRealtimeOptions_NyctAlertsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtfsRealtimeOptions_NyctAlertsOptions) ProtoMessage() {}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtfsRealtimeOptions_NyctAlertsOptions.ProtoReflect.Descriptor instead.
func (*GtfsRealtimeOptions_NyctAlertsOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{8, 1}
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetElevatorAlertsDeduplicationPolicy() GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy {
	if x != nil {
		return x.ElevatorAlertsDeduplicationPolicy
	}
	return GtfsRealtimeOptions_NyctAlertsOptions_NO_DEDUPLICATION
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetElevatorAlertsInformUsingStationIds() bool {
	if x != nil {
		return x.ElevatorAlertsInformUsingStationIds
	}
	return false
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetSkipTimetabledNoServiceAlerts() bool {
	if x != nil {
		return x.SkipTimetabledNoServiceAlerts
	}
	return false
}

func (x *GtfsRealtimeOptions_NyctAlertsOptions) GetAddNyctMetadata() bool {
	if x != nil {
		return x.AddNyctMetadata
	}
	return false
}

// Description of options relevent for static service maps only.
type ServiceMapConfig_StaticOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If specified, only include trips that start earlier than this time.
	// The time is specified as a number of hours after midnight; i.e., 2:30am is '2.5'.
	StartsEarlierThan *float64 `protobuf:"fixed64,1,opt,name=starts_earlier_than,json=startsEarlierThan,proto3,oneof" json:"starts_earlier_than,omitempty"`
	// If specified, only include trips that start later than this time.
	StartsLaterThan *float64 `protobuf:"fixed64,2,opt,name=starts_later_than,json=startsLaterThan,proto3,oneof" json:"starts_later_than,omitempty"`
	// If specified, only include trips that end earlier than this time.
	EndsEarlierThan *float64 `protobuf:"fixed64,3,opt,name=ends_earlier_than,json=endsEarlierThan,proto3,oneof" json:"ends_earlier_than,omitempty"`
	// If specified, only include trips that end later than this time.
	EndsLaterThan *float64 `protobuf:"fixed64,4,opt,name=ends_later_than,json=endsLaterThan,proto3,oneof" json:"ends_later_than,omitempty"`
	// If specified, only include trips which run on at least one of the provided days.
	// If left empty, no trip filtering is provided.
	Days []string `protobuf:"bytes,5,rep,name=days,proto3" json:"days,omitempty"`
}

func (x *ServiceMapConfig_StaticOptions) Reset() {
	*x = ServiceMapConfig_StaticOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMapConfig_StaticOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMapConfig_StaticOptions) ProtoMessage() {}

func (x *ServiceMapConfig_StaticOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMapConfig_StaticOptions.ProtoReflect.Descriptor instead.
func (*ServiceMapConfig_StaticOptions) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ServiceMapConfig_StaticOptions) GetStartsEarlierThan() float64 {
	if x != nil && x.StartsEarlierThan != nil {
		return *x.StartsEarlierThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetStartsLaterThan() float64 {
	if x != nil && x.StartsLaterThan != nil {
		return *x.StartsLaterThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetEndsEarlierThan() float64 {
	if x != nil && x.EndsEarlierThan != nil {
		return *x.EndsEarlierThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetEndsLaterThan() float64 {
	if x != nil && x.EndsLaterThan != nil {
		return *x.EndsLaterThan
	}
	return 0
}

func (x *ServiceMapConfig_StaticOptions) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

type GetSchedulerStatusReply_Feed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId             string      `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	FeedConfig           *FeedConfig `protobuf:"bytes,7,opt,name=feed_config,json=feedConfig,proto3" json:"feed_config,omitempty"`
	LastSuccessfulUpdate int64       `protobuf:"varint,4,opt,name=last_successful_update,json=lastSuccessfulUpdate,proto3" json:"last_successful_update,omitempty"`
	LastFinishedUpdate   int64       `protobuf:"varint,5,opt,name=last_finished_update,json=lastFinishedUpdate,proto3" json:"last_finished_update,omitempty"`
	CurrentlyRunning     bool        `protobuf:"varint,6,opt,name=currently_running,json=currentlyRunning,proto3" json:"currently_running,omitempty"`
}

func (x *GetSchedulerStatusReply_Feed) Reset() {
	*x = GetSchedulerStatusReply_Feed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerStatusReply_Feed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerStatusReply_Feed) ProtoMessage() {}

func (x *GetSchedulerStatusReply_Feed) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerStatusReply_Feed.ProtoReflect.Descriptor instead.
func (*GetSchedulerStatusReply_Feed) Descriptor() ([]byte, []int) {
	return file_api_admin_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetSchedulerStatusReply_Feed) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *GetSchedulerStatusReply_Feed) GetFeedConfig() *FeedConfig {
	if x != nil {
		return x.FeedConfig
	}
	return nil
}

func (x *GetSchedulerStatusReply_Feed) GetLastSuccessfulUpdate() int64 {
	if x != nil {
		return x.LastSuccessfulUpdate
	}
	return 0
}

func (x *GetSchedulerStatusReply_Feed) GetLastFinishedUpdate() int64 {
	if x != nil {
		return x.LastFinishedUpdate
	}
	return 0
}

func (x *GetSchedulerStatusReply_Feed) GetCurrentlyRunning() bool {
	if x != nil {
		return x.CurrentlyRunning
	}
	return false
}

var File_api_admin_proto protoreflect.FileDescriptor

var file_api_admin_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x35, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0b, 0x79, 0x61,
	0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a,
	0x79, 0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xec, 0x01,
	0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a,
	0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x1a,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x32, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x7b, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x73, 0x22, 0xbf, 0x07, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x15, 0x67, 0x74, 0x66, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x13, 0x67, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x49, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3e, 0x0a, 0x19,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x48, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x31, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x67, 0x74, 0x66, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x73, 0x22, 0xce, 0x08, 0x0a, 0x13, 0x47, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x47, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x12, 0x6e, 0x79, 0x63,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x79, 0x63, 0x74,
	0x54, 0x72, 0x69, 0x70, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x6e, 0x79, 0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x13, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x79, 0x63, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x11, 0x6e, 0x79, 0x63, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x10, 0x4e, 0x79, 0x63,
	0x74, 0x54, 0x72, 0x69, 0x70, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a,
	0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x6e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6c,
	0x65, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x69, 0x70, 0x73,
	0x12, 0x51, 0x0a, 0x26, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6d, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x62, 0x75, 0x73, 0x68, 0x77, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x21, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x49, 0x6e, 0x42, 0x75, 0x73, 0x68, 0x77,
	0x69, 0x63, 0x6b, 0x1a, 0xef, 0x03, 0x0a, 0x11, 0x4e, 0x79, 0x63, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x24, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x47, 0x74, 0x66, 0x73, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x79, 0x63, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x44,
	0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x21, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x28, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x21,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x79,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x4e, 0x79, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x71, 0x0a, 0x21, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x44, 0x45,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x45, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x58, 0x10, 0x02, 0x22, 0x3e, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x59, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x49,
	0x50, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x59, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x53, 0x10, 0x02, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x74,
	0x72, 0x69, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8, 0x04, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xbf, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x45,
	0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0f, 0x65, 0x6e, 0x64,
	0x73, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x73,
	0x4c, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x22, 0x22, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x5f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x94, 0x08, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b,
	0x66, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x29,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6d, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x0b, 0x66, 0x65,
	0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66, 0x65,
	0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x1a, 0xe6, 0x01, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b,
	0x66, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x17, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x31, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xdf, 0x05,
	0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x1d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x1a, 0x14, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x56, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a,
	0x14, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x60, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x12, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x22, 0x24, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2f, 0x7b, 0x66,
	0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22,
	0x0a, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x6c, 0x6f, 0x67,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x53, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0b, 0x1a, 0x09, 0x2f, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x66, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_admin_proto_rawDescOnce sync.Once
	file_api_admin_proto_rawDescData = file_api_admin_proto_rawDesc
)

func file_api_admin_proto_rawDescGZIP() []byte {
	file_api_admin_proto_rawDescOnce.Do(func() {
		file_api_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_admin_proto_rawDescData)
	})
	return file_api_admin_proto_rawDescData
}

var file_api_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_api_admin_proto_goTypes = []interface{}{
	(FeedConfig_SchedulingPolicy)(0),                                             // 0: FeedConfig.SchedulingPolicy
	(GtfsRealtimeOptions_Extension)(0),                                           // 1: GtfsRealtimeOptions.Extension
	(GtfsRealtimeOptions_NyctAlertsOptions_ElevatorAlertsDeduplicationPolicy)(0), // 2: GtfsRealtimeOptions.NyctAlertsOptions.ElevatorAlertsDeduplicationPolicy
	(ServiceMapConfig_Source)(0),                                                 // 3: ServiceMapConfig.Source
	(FeedUpdate_Status)(0),                                                       // 4: FeedUpdate.Status
	(*GetSystemConfigRequest)(nil),                                               // 5: GetSystemConfigRequest
	(*InstallOrUpdateSystemRequest)(nil),                                         // 6: InstallOrUpdateSystemRequest
	(*TextConfig)(nil),                                                           // 7: TextConfig
	(*InstallOrUpdateSystemReply)(nil),                                           // 8: InstallOrUpdateSystemReply
	(*DeleteSystemRequest)(nil),                                                  // 9: DeleteSystemRequest
	(*DeleteSystemReply)(nil),                                                    // 10: DeleteSystemReply
	(*SystemConfig)(nil),                                                         // 11: SystemConfig
	(*FeedConfig)(nil),                                                           // 12: FeedConfig
	(*GtfsRealtimeOptions)(nil),                                                  // 13: GtfsRealtimeOptions
	(*ServiceMapConfig)(nil),                                                     // 14: ServiceMapConfig
	(*UpdateFeedRequest)(nil),                                                    // 15: UpdateFeedRequest
	(*FeedUpdate)(nil),                                                           // 16: FeedUpdate
	(*UpdateFeedReply)(nil),                                                      // 17: UpdateFeedReply
	(*GetSchedulerStatusRequest)(nil),                                            // 18: GetSchedulerStatusRequest
	(*GetSchedulerStatusReply)(nil),                                              // 19: GetSchedulerStatusReply
	(*ResetSchedulerRequest)(nil),                                                // 20: ResetSchedulerRequest
	(*ResetSchedulerReply)(nil),                                                  // 21: ResetSchedulerReply
	(*GetLogLevelRequest)(nil),                                                   // 22: GetLogLevelRequest
	(*GetLogLevelReply)(nil),                                                     // 23: GetLogLevelReply
	(*SetLogLevelRequest)(nil),                                                   // 24: SetLogLevelRequest
	(*SetLogLevelReply)(nil),                                                     // 25: SetLogLevelReply
	nil,                                                                          // 26: TextConfig.TemplateArgsEntry
	nil,                                                                          // 27: FeedConfig.HttpHeadersEntry
	(*GtfsRealtimeOptions_NyctTripsOptions)(nil),                                 // 28: GtfsRealtimeOptions.NyctTripsOptions
	(*GtfsRealtimeOptions_NyctAlertsOptions)(nil),                                // 29: GtfsRealtimeOptions.NyctAlertsOptions
	(*ServiceMapConfig_StaticOptions)(nil),                                       // 30: ServiceMapConfig.StaticOptions
	(*GetSchedulerStatusReply_Feed)(nil),                                         // 31: GetSchedulerStatusReply.Feed
}
var file_api_admin_proto_depIdxs = []int32{
	11, // 0: InstallOrUpdateSystemRequest.system_config:type_name -> SystemConfig
	7,  // 1: InstallOrUpdateSystemRequest.yaml_config:type_name -> TextConfig
	26, // 2: TextConfig.template_args:type_name -> TextConfig.TemplateArgsEntry
	11, // 3: InstallOrUpdateSystemReply.system_config:type_name -> SystemConfig
	12, // 4: SystemConfig.feeds:type_name -> FeedConfig
	14, // 5: SystemConfig.service_maps:type_name -> ServiceMapConfig
	13, // 6: FeedConfig.gtfs_realtime_options:type_name -> GtfsRealtimeOptions
	0,  // 7: FeedConfig.scheduling_policy:type_name -> FeedConfig.SchedulingPolicy
	0,  // 8: FeedConfig.update_strategy:type_name -> FeedConfig.SchedulingPolicy
	27, // 9: FeedConfig.http_headers:type_name -> FeedConfig.HttpHeadersEntry
	1,  // 10: GtfsRealtimeOptions.extension:type_name -> GtfsRealtimeOptions.Extension
	28, // 11: GtfsRealtimeOptions.nyct_trips_options:type_name -> GtfsRealtimeOptions.NyctTripsOptions
	29, // 12: GtfsRealtimeOptions.nyct_alerts_options:type_name -> GtfsRealtimeOptions.NyctAlertsOptions
	3,  // 13: ServiceMapConfig.source:type_name -> ServiceMapConfig.Source
	30, // 14: ServiceMapConfig.static_options:type_name -> ServiceMapConfig.StaticOptions
	12, // 15: FeedUpdate.feed_config:type_name -> FeedConfig
	4,  // 16: FeedUpdate.status:type_name -> FeedUpdate.Status
	16, // 17: UpdateFeedReply.feed_update:type_name -> FeedUpdate
	31, // 18: GetSchedulerStatusReply.feeds:type_name -> GetSchedulerStatusReply.Feed
	2,  // 19: GtfsRealtimeOptions.NyctAlertsOptions.elevator_alerts_deduplication_policy:type_name -> GtfsRealtimeOptions.NyctAlertsOptions.ElevatorAlertsDeduplicationPolicy
	12, // 20: GetSchedulerStatusReply.Feed.feed_config:type_name -> FeedConfig
	5,  // 21: Admin.GetSystemConfig:input_type -> GetSystemConfigRequest
	6,  // 22: Admin.InstallOrUpdateSystem:input_type -> InstallOrUpdateSystemRequest
	9,  // 23: Admin.DeleteSystem:input_type -> DeleteSystemRequest
	15, // 24: Admin.UpdateFeed:input_type -> UpdateFeedRequest
	18, // 25: Admin.GetSchedulerStatus:input_type -> GetSchedulerStatusRequest
	20, // 26: Admin.ResetScheduler:input_type -> ResetSchedulerRequest
	22, // 27: Admin.GetLogLevel:input_type -> GetLogLevelRequest
	24, // 28: Admin.SetLogLevel:input_type -> SetLogLevelRequest
	11, // 29: Admin.GetSystemConfig:output_type -> SystemConfig
	8,  // 30: Admin.InstallOrUpdateSystem:output_type -> InstallOrUpdateSystemReply
	10, // 31: Admin.DeleteSystem:output_type -> DeleteSystemReply
	17, // 32: Admin.UpdateFeed:output_type -> UpdateFeedReply
	19, // 33: Admin.GetSchedulerStatus:output_type -> GetSchedulerStatusReply
	21, // 34: Admin.ResetScheduler:output_type -> ResetSchedulerReply
	23, // 35: Admin.GetLogLevel:output_type -> GetLogLevelReply
	25, // 36: Admin.SetLogLevel:output_type -> SetLogLevelReply
	29, // [29:37] is the sub-list for method output_type
	21, // [21:29] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_api_admin_proto_init() }
func file_api_admin_proto_init() {
	if File_api_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOrUpdateSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOrUpdateSystemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSystemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtfsRealtimeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSchedulerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSchedulerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogLevelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtfsRealtimeOptions_NyctTripsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtfsRealtimeOptions_NyctAlertsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMapConfig_StaticOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerStatusReply_Feed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_admin_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*InstallOrUpdateSystemRequest_SystemConfig)(nil),
		(*InstallOrUpdateSystemRequest_YamlConfig)(nil),
	}
	file_api_admin_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TextConfig_Url)(nil),
		(*TextConfig_Content)(nil),
	}
	file_api_admin_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_api_admin_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_api_admin_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_api_admin_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_api_admin_proto_msgTypes[25].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_admin_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_admin_proto_goTypes,
		DependencyIndexes: file_api_admin_proto_depIdxs,
		EnumInfos:         file_api_admin_proto_enumTypes,
		MessageInfos:      file_api_admin_proto_msgTypes,
	}.Build()
	File_api_admin_proto = out.File
	file_api_admin_proto_rawDesc = nil
	file_api_admin_proto_goTypes = nil
	file_api_admin_proto_depIdxs = nil
}
